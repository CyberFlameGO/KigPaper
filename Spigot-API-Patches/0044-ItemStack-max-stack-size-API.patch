From 62a89ee3c334ebc408348d3dc790f49a9bde07e3 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Thu, 18 Feb 2021 19:48:36 +0100
Subject: [PATCH] ItemStack max stack size API


diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index d9cff5b0..957a0b56 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -22,6 +22,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     private MaterialData data = null;
     private short durability = 0;
     private ItemMeta meta;
+    private int customMaxStackSize = -1; // KigPaper
 
     @Utility
     protected ItemStack() {}
@@ -279,6 +280,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      */
     @Utility
     public int getMaxStackSize() {
+        if(this.customMaxStackSize != -1) return this.customMaxStackSize; // KigPaper
         Material material = getType();
         if (material != null) {
             return material.getMaxStackSize();
@@ -286,6 +288,23 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         return -1;
     }
 
+    // KigPaper start
+    /**
+     * Sets a new max stack size for the item.
+     * @param maxSize the max size
+     */
+    public void setMaxStackSize(int maxSize) {
+        this.customMaxStackSize = maxSize;
+    }
+
+    /**
+     * Returns whether this item has a custom max stack size set.
+     */
+    public boolean hasCustomMaxStackSize() {
+        return this.customMaxStackSize != -1;
+    }
+    // KigPaper end
+
     private void createData(final byte data) {
         Material mat = Material.getMaterial(type);
 
-- 
2.28.0

