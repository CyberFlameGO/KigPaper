From 3ff5e6ddb5c8d98f2b5c4ad59290534e79d0758c Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Wed, 9 Jun 2021 21:27:07 +0200
Subject: [PATCH] PlayerMoveEvent accurate time


diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index d56b7e40..3747bca5 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -14,11 +14,13 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
     private boolean cancel = false;
     private Location from;
     private Location to;
+    private long accurateMoveTime; // KigPaper
 
-    public PlayerMoveEvent(final Player player, final Location from, final Location to) {
+    public PlayerMoveEvent(final Player player, final Location from, final Location to, long accurateMoveTime) { // KigPaper - add accurate move time
         super(player);
         this.from = from;
         this.to = to;
+        this.accurateMoveTime = accurateMoveTime;
     }
 
     /**
@@ -87,6 +89,28 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
         this.to = to;
     }
 
+    // KigPaper start
+    /**
+     * The timestamp of the packet that triggered this move.
+     * This timestamp is calculated on the Netty thread that decoded the packet, so it's not bound to a tick scheduler.
+     * The timestamp is calculated using {@link System#nanoTime()}, which provides better granularity than the Minecraft tick system (50ms intervals).
+     *
+     * Note: some implementations return 0, though it (along with negative values) can still be a valid timestamp.
+     * To check if the value is a valid timestamp, run {@link PlayerMoveEvent#hasAccurateMoveTime()} first.
+     * @return the move's accurate timestamp
+     */
+    public long getAccurateMoveTime() {
+        return accurateMoveTime;
+    }
+
+    /**
+     * @return whether the event implementation contains an accurate move timestamp
+     */
+    public boolean hasAccurateMoveTime() {
+        return !(this instanceof PlayerTeleportEvent);
+    }
+    // KigPaper end
+
     private void validateLocation(Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index fa9c8230..428c639c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -12,7 +12,7 @@ public class PlayerTeleportEvent extends PlayerMoveEvent {
     private TeleportCause cause = TeleportCause.UNKNOWN;
 
     public PlayerTeleportEvent(final Player player, final Location from, final Location to) {
-        super(player, from, to);
+        super(player, from, to, 0);
     }
 
     public PlayerTeleportEvent(final Player player, final Location from, final Location to, final TeleportCause cause) {
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
index b206b1f3..859f925b 100644
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -24,7 +24,7 @@ public class TimedRegisteredListenerTest {
         TestPlugin plugin = new TestPlugin("Test");
 
         PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
-        PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null);
+        PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null, 0);
         BlockBreakEvent breakEvent = new BlockBreakEvent(null, null);
 
         TimedRegisteredListener trl = new TimedRegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
-- 
2.31.1

