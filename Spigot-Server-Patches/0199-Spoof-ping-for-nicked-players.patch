From e854a332c0e0da3aee2f197f7a7b0513d388a5b8 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Fri, 6 Aug 2021 17:54:39 +0200
Subject: [PATCH] Spoof ping for nicked players


diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
index 95308d8ad..50300bff9 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -56,7 +56,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
                     profile.getProperties().put("textures", new Property("textures", old.getValue(), old.getSignature()));
                 }
             }
-            this.b.add(new PlayerInfoData(profile, entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+            this.b.add(new PlayerInfoData(profile, spoofPing(entityplayer), entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
         }
 
     }
@@ -72,7 +72,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
                 profile = new GameProfile(entityplayer.getNickSpoofedUUID(), entityplayer.getNickname());
             }
             // KigPaper end
-            this.b.add(new PlayerInfoData(profile, entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+            this.b.add(new PlayerInfoData(profile, spoofPing(entityplayer), entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
         }
 
     }
@@ -98,12 +98,31 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
                 PropertyMap properties = infoData.d.getProperties();
                 infoData.d = new GameProfile(recipient.getUniqueID(), infoData.d.getName());
                 infoData.d.getProperties().putAll(properties);
+                infoData.b = recipient.ping; // Reveal ping to self
                 clone.b.set(i, infoData);
                 break;
             }
         }
         return clone == null ? this : clone;
     }
+
+    private int spoofPing(EntityPlayer player) {
+        int ping = player.ping;
+        if (ping <= 0 || !player.isNicknamed()) return ping;
+        // KigPaper - spoof ping
+        // We can achieve "randomness" by adding the fixed value to the player's actual ping.
+        // The fixed value is constant for each nickname so it persists across servers.
+        long val = player.getNickSpoofedUUID().hashCode();
+        if (ping < 100) {
+            // Increase low pings
+            ping += (val % 2) * 50 + 50;
+        } else {
+            // Try to reduce pings >= 100 instead
+            // (val % 3 * 20) is guaranteed to return <= 40, so with (ping / 2) being >= 50, we never get negative pings
+            ping -= val % 3 * 20 + ping / 2;
+        }
+        return ping;
+    }
     // KigPaper end
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
@@ -283,7 +302,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
     public class PlayerInfoData { // Don't make static - Breaks ProtocolLib
 
-        private final int b;
+        private int b; // KigPaper - make not final
         private final WorldSettings.EnumGamemode c;
         private GameProfile d; // KigPaper - make not final
         private final IChatBaseComponent e;
-- 
2.31.1

