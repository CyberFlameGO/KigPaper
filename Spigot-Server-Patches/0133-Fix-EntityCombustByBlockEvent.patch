From 11d7cff836634fa5ad05829cbe20b12c6b342cea Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Wed, 3 Feb 2021 15:35:37 +0100
Subject: [PATCH] Fix EntityCombustByBlockEvent


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index db66228e7..0880142f3 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -18,8 +18,7 @@ import org.bukkit.entity.Painting;
 import org.bukkit.entity.Vehicle;
 import co.aikar.timings.SpigotTimings; // Spigot
 import co.aikar.timings.Timing; // Spigot
-import org.bukkit.event.entity.EntityCombustByEntityEvent;
-import org.bukkit.event.entity.EntityExtinguishEvent;
+import org.bukkit.event.entity.*;
 import org.bukkit.event.hanging.HangingBreakByEntityEvent;
 import org.bukkit.event.painting.PaintingBreakByEntityEvent;
 import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
@@ -29,8 +28,6 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.entity.EntityCombustEvent;
-import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
@@ -377,11 +374,21 @@ public abstract class Entity implements ICommandListener {
 
     protected void burnFromLava() {
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.LAVA, 4.0F);
+            //this.damageEntity(DamageSource.LAVA, 4.0F); // KigPaper
 
             // CraftBukkit start - Fallen in lava TODO: this event spams!
+            // KigPaper start - https://github.com/Electroid/SportPaper/blob/5ab471494b36601a9c04f2d55efdfde9cc2d5484/patches/server/0035-Fix-combustion-events.patch
+            Vec3D lavaPos = this.world.getLargestBlockIntersection(this.boundingBox.shrink(0.001D, 0.001D, 0.001D), Material.LAVA);
+            org.bukkit.block.Block lavaBlock = lavaPos == null ? null : this.world.getWorld().getBlockAt((int) lavaPos.a, (int) lavaPos.b, (int) lavaPos.c);
+            try {
+                CraftEventFactory.blockDamage = lavaBlock;
+                this.damageEntity(DamageSource.LAVA, 4F);
+            } finally {
+                CraftEventFactory.blockDamage = null;
+            }
+            // KigPaper end
             if (this instanceof EntityLiving) {
-                if (fireTicks <= 0) {
+                /*if (fireTicks <= 0) {
                     // not on fire yet
                     // TODO: shouldn't be sending null for the block
                     org.bukkit.block.Block damager = null; // ((WorldServer) this.l).getWorld().getBlockAt(i, j, k);
@@ -395,8 +402,17 @@ public abstract class Entity implements ICommandListener {
                 } else {
                     // This will be called every single tick the entity is in lava, so don't throw an event
                     this.setOnFire(15);
+                }*/ // KigPaper start
+                // Note that in order for cancelling or custom duration to work properly,
+                // this event must be fired every tick, thus we cannot avoid "spamming" it.
+                org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(lavaBlock, damagee, 15);
+                this.world.getServer().getPluginManager().callEvent(combustEvent);
+                if (!combustEvent.isCancelled()) {
+                    this.setOnFire(combustEvent.getDuration());
                 }
                 return;
+                // KigPaper end
             }
             // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
             this.setOnFire(15);
@@ -752,10 +768,17 @@ public abstract class Entity implements ICommandListener {
             // CraftBukkit end
 
             boolean flag2 = this.U();
-
-            if (this.world.e(this.getBoundingBox().shrink(0.001D, 0.001D, 0.001D))) {
-                this.burn(1);
-                if (!flag2) {
+            // KigPaper start - https://github.com/Electroid/SportPaper/blob/5ab471494b36601a9c04f2d55efdfde9cc2d5484/patches/server/0035-Fix-combustion-events.patch
+            Vec3D firePos = this.world.getLargestBlockIntersection(this.boundingBox.shrink(0.001D, 0.001D, 0.001D), Material.FIRE);
+            if (firePos != null) {
+                org.bukkit.block.Block fireBlock = this.bukkitEntity.getWorld().getBlockAt((int) firePos.a, (int) firePos.b, (int) firePos.c);
+                try {
+                    CraftEventFactory.blockDamage = fireBlock;
+                    this.burn(1);
+                } finally {
+                    CraftEventFactory.blockDamage = null;
+                }
+                if (!flag2) {/*
                     ++this.fireTicks;
                     // CraftBukkit start - Not on fire yet
                     if (this.fireTicks <= 0) { // Only throw events on the first combust, otherwise it spams
@@ -768,8 +791,22 @@ public abstract class Entity implements ICommandListener {
                     } else {
                         // CraftBukkit end
                         this.setOnFire(8);
+                    }*/
+                    EntityCombustByBlockEvent event = new EntityCombustByBlockEvent(fireBlock, this.getBukkitEntity(), 8);
+                    this.world.getServer().getPluginManager().callEvent(event);
+                    if (!event.isCancelled()) {
+                        // Note carefully how this works: when fireTicks is negative, the entity is
+                        // "heating up" but not on fire yet. When fireTicks reaches 0, the entity
+                        // "ignites" and fireTicks jumps to 160. It will then stay at that value as
+                        // long as the player remains in fire (because the ++ below will cancel out
+                        // the -- in the entity tick). For the event cancelling to work, it has to
+                        // be fired every tick, thus we cannot avoid "spamming" it.
+                        ++this.fireTicks;
+                        if (this.fireTicks == 0) {
+                            this.setOnFire(event.getDuration());
+                        }
                     }
-                }
+                } // KigPaper end
             } else if (this.fireTicks <= 0) {
                 this.fireTicks = -this.maxFireTicks;
             }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 8f3511f80..12e6f607a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -3269,4 +3269,33 @@ public abstract class World implements IBlockAccess {
 
         return k >= -short0 && k <= short0 && l >= -short0 && l <= short0 && this.keepSpawnInMemory; // CraftBukkit - Added 'this.keepSpawnInMemory'
     }
+
+    // KigPaper start - https://github.com/Electroid/SportPaper/blob/5ab471494b36601a9c04f2d55efdfde9cc2d5484/patches/server/0035-Fix-combustion-events.patch
+    public Vec3D getLargestBlockIntersection(AxisAlignedBB aabb, Material material) {
+        int xMin = MathHelper.floor(aabb.a);
+        int xMax = MathHelper.floor(aabb.d + 1.0D);
+        int yMin = MathHelper.floor(aabb.b);
+        int yMax = MathHelper.floor(aabb.e + 1.0D);
+        int zMin = MathHelper.floor(aabb.c);
+        int zMax = MathHelper.floor(aabb.f + 1.0D);
+        double maxVolume = 0;
+        Vec3D block = null;
+        for (int x = xMin; x < xMax; ++x) {
+            for (int y = yMin; y < yMax; ++y) {
+                for (int z = zMin; z < zMax; ++z) {
+                    IBlockData type = this.getType(new BlockPosition(x, y, z));
+                    if (material == type.getBlock().getMaterial()) {
+                        AxisAlignedBB i = new AxisAlignedBB(x, x+1, y, y+1, z, z+1).a(aabb);
+                        double volume = (i.d - i.a) * (i.e - i.b) * (i.f - i.c);
+                        if(volume > maxVolume) {
+                            maxVolume = volume;
+                            block = new Vec3D(x, y, z);
+                        }
+                    }
+                }
+            }
+        }
+        return block;
+    }
+    // KigPaper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index da902708b..cc99e7597 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -470,18 +470,16 @@ public class CraftEventFactory {
                 event.getEntity().setLastDamageCause(event);
             }
             return event;
-        } else if (source == DamageSource.LAVA) {
-            EntityDamageEvent event = callEvent(new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions));
-            if (!event.isCancelled()) {
-                event.getEntity().setLastDamageCause(event);
-            }
-            return event;
         } else if (blockDamage != null) {
             DamageCause cause = null;
             Block damager = blockDamage;
             blockDamage = null;
             if (source == DamageSource.CACTUS) {
                 cause = DamageCause.CONTACT;
+            } else if(source == DamageSource.FIRE) { // KigPaper
+                cause = DamageCause.FIRE;
+            } else if(source == DamageSource.LAVA) { // KigPaper
+                cause = DamageCause.LAVA;
             } else {
                 throw new RuntimeException(String.format("Unhandled damage of %s by %s from %s", entity, damager, source.translationIndex)); // Spigot
             }
@@ -513,6 +511,8 @@ public class CraftEventFactory {
         DamageCause cause = null;
         if (source == DamageSource.FIRE) {
             cause = DamageCause.FIRE;
+        } else if (source == DamageSource.LAVA) {
+            cause = DamageCause.LAVA;
         } else if (source == DamageSource.STARVE) {
             cause = DamageCause.STARVATION;
         } else if (source == DamageSource.WITHER) {
-- 
2.28.0

