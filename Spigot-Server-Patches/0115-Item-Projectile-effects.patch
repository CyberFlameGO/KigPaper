From 7fd5fe6ef717ea67a8a4c344643b6713d0b5e764 Mon Sep 17 00:00:00 2001
From: RoccoDev <roccodev.business@gmail.com>
Date: Mon, 21 Sep 2020 16:10:29 +0200
Subject: [PATCH] Item Projectile effects


diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 1f8b1c726..f0ab9458d 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -8,13 +8,25 @@ import org.bukkit.event.player.PlayerPickupItemEvent; // CraftBukkit
 public class EntityItem extends Entity {
 
     private static final Logger b = LogManager.getLogger();
-    private int age;
+    public int age; // KigPaper - private -> public
     public int pickupDelay;
     private int e;
     private String f;
     private String g;
     public float a;
     private int lastTick = MinecraftServer.currentTick; // CraftBukkit
+    // KigPaper start
+    private int despawnRate;
+    private boolean gravity = true;
+
+    public boolean isGravity() {
+        return gravity;
+    }
+
+    public void setGravity(boolean gravity) {
+        this.gravity = gravity;
+    }
+    // KigPaper end
 
     public EntityItem(World world, double d0, double d1, double d2) {
         super(world);
@@ -28,6 +40,13 @@ public class EntityItem extends Entity {
         this.motZ = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
     }
 
+    // KigPaper - immovable items (no velocity when spawned)
+    public static EntityItem immovable(World world, double x, double y, double z, ItemStack stack) {
+        EntityItem item = new EntityItem(world, x, y, z, stack);
+        item.motX = item.motY = item.motZ = 0;
+        return item;
+    }
+
     public EntityItem(World world, double d0, double d1, double d2, ItemStack itemstack) {
         this(world, d0, d1, d2);
         // CraftBukkit start - Can't set null items in the datawatcher
@@ -38,6 +57,16 @@ public class EntityItem extends Entity {
         this.setItemStack(itemstack);
     }
 
+    // KigPaper start
+    public int getDespawnRate() {
+        return despawnRate == 0 ? world.spigotConfig.itemDespawnRate : despawnRate;
+    }
+
+    public void setDespawnRate(int despawnRate) {
+        this.despawnRate = despawnRate == 0 ? world.spigotConfig.itemDespawnRate : despawnRate;
+    }
+    // KigPaper end
+
     protected boolean s_() {
         return false;
     }
@@ -69,7 +98,7 @@ public class EntityItem extends Entity {
             this.lastX = this.locX;
             this.lastY = this.locY;
             this.lastZ = this.locZ;
-            this.motY -= 0.03999999910593033D;
+            if(gravity) this.motY -= 0.03999999910593033D; // KigPaper - gravity
             this.noclip = this.j(this.locX, (this.getBoundingBox().b + this.getBoundingBox().e) / 2.0D, this.locZ);
             this.move(this.motX, this.motY, this.motZ);
             boolean flag = (int) this.lastX != (int) this.locX || (int) this.lastY != (int) this.locY || (int) this.lastZ != (int) this.locZ;
@@ -94,12 +123,15 @@ public class EntityItem extends Entity {
             }
 
             this.motX *= (double) f;
-            this.motY *= 0.9800000190734863D;
+            if(gravity) this.motY *= 0.9800000190734863D; // KigPaper - gravity
             this.motZ *= (double) f;
             if (this.onGround) {
                 this.motY *= -0.5D;
             }
 
+            // KigPaper - if not affected by gravity, update the velocity on the client (gravity is calculated client-side)
+            if(!gravity) this.ac(); // velocityChanged = true
+
             /* Craftbukkit start - moved up
             if (this.age != -32768) {
                 ++this.age;
@@ -108,7 +140,7 @@ public class EntityItem extends Entity {
 
 
             this.W();
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (!this.world.isClientSide && this.age >= getDespawnRate()) { // Spigot
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 764007093..9d1f779e7 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -329,16 +329,27 @@ public class CraftWorld implements World {
         return world;
     }
 
+    // KigPaper start
     public org.bukkit.entity.Item dropItem(Location loc, ItemStack item) {
+        return dropItem(loc, item, false);
+    }
+
+    public org.bukkit.entity.Item dropImmovableItem(Location loc, ItemStack item) {
+        return dropItem(loc, item, true);
+    }
+
+    private org.bukkit.entity.Item dropItem(Location loc, ItemStack item, boolean immovable) {
         Validate.notNull(item, "Cannot drop a Null item.");
         Validate.isTrue(item.getTypeId() != 0, "Cannot drop AIR.");
-        EntityItem entity = new EntityItem(world, loc.getX(), loc.getY(), loc.getZ(), CraftItemStack.asNMSCopy(item));
+        EntityItem entity = immovable ? EntityItem.immovable(world, loc.getX(), loc.getY(), loc.getZ(), CraftItemStack.asNMSCopy(item))
+                :new EntityItem(world, loc.getX(), loc.getY(), loc.getZ(), CraftItemStack.asNMSCopy(item));
         entity.pickupDelay = 10;
         world.addEntity(entity);
         // TODO this is inconsistent with how Entity.getBukkitEntity() works.
         // However, this entity is not at the moment backed by a server entity class so it may be left.
         return new CraftItem(world.getServer(), entity);
     }
+    // KigPaper end
 
     private static void randomLocationWithinBlock(Location loc, double xs, double ys, double zs) {
         double prevX = loc.getX();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
index a17a537d6..3a6da41f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
@@ -37,6 +37,31 @@ public class CraftItem extends CraftEntity implements Item {
         item.pickupDelay = Math.min(delay, Short.MAX_VALUE);
     }
 
+    @Override
+    public int getAge() {
+        return item.age;
+    }
+
+    @Override
+    public int getDespawnRate() {
+        return item.getDespawnRate();
+    }
+
+    @Override
+    public void setDespawnRate(int rate) {
+        item.setDespawnRate(rate);
+    }
+
+    @Override
+    public boolean isAffectedByGravity() {
+        return item.isGravity();
+    }
+
+    @Override
+    public void setAffectedByGravity(boolean gravity) {
+        item.setGravity(gravity);
+    }
+
     @Override
     public String toString() {
         return "CraftItem";
-- 
2.26.2

