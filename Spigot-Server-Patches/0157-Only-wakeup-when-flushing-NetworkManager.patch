From bbb42ad55ab50ca7352c41522b9789908e456750 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Mon, 8 Mar 2021 08:13:46 +0100
Subject: [PATCH] Only wakeup when flushing NetworkManager


diff --git a/src/main/java/io/netty/channel/PublicNonWakeupRunnable.java b/src/main/java/io/netty/channel/PublicNonWakeupRunnable.java
new file mode 100644
index 000000000..23da1bd09
--- /dev/null
+++ b/src/main/java/io/netty/channel/PublicNonWakeupRunnable.java
@@ -0,0 +1,4 @@
+package io.netty.channel;
+
+public interface PublicNonWakeupRunnable extends SingleThreadEventLoop.NonWakeupRunnable {
+}
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 8938f206a..a0eed18d8 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -2,11 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.*;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.local.LocalChannel;
 import io.netty.channel.local.LocalEventLoopGroup;
@@ -225,24 +221,38 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         } else {
-            this.channel.eventLoop().execute(new Runnable() {
-                public void run() {
+            // KigPaper start - only wakeup when flushing
+            if(doFlush) {
+                this.channel.eventLoop().execute(() -> {
                     if (enumprotocol != enumprotocol1) {
                         NetworkManager.this.a(enumprotocol);
                     }
 
-                    //ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet); // KigPaper
-                    ChannelFuture channelfuture = doFlush ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet);
+                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
 
                     if (agenericfuturelistener != null) {
                         channelfuture.addListeners(agenericfuturelistener);
                     }
 
                     channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-                }
-            });
-        }
+                });
+            } else {
+                this.channel.eventLoop().execute((PublicNonWakeupRunnable) () -> {
+                    if (enumprotocol != enumprotocol1) {
+                        NetworkManager.this.a(enumprotocol);
+                    }
+
+                    ChannelFuture channelfuture = NetworkManager.this.channel.write(packet);
 
+                    if (agenericfuturelistener != null) {
+                        channelfuture.addListeners(agenericfuturelistener);
+                    }
+
+                    channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                });
+            }
+            // KigPaper end
+        }
     }
 
     private void m() {
-- 
2.28.0

