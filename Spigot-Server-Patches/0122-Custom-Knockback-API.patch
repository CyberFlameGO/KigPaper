From e917e0ac22d9315b72957f48bef28111fd935bf8 Mon Sep 17 00:00:00 2001
From: RoccoDev <roccodev.business@gmail.com>
Date: Sun, 27 Sep 2020 19:19:14 +0200
Subject: [PATCH] Custom Knockback API


diff --git a/src/main/java/dev/rocco/kig/paper/impl/velocity/CraftKnockbackValues.java b/src/main/java/dev/rocco/kig/paper/impl/velocity/CraftKnockbackValues.java
new file mode 100644
index 000000000..cf0fd297d
--- /dev/null
+++ b/src/main/java/dev/rocco/kig/paper/impl/velocity/CraftKnockbackValues.java
@@ -0,0 +1,86 @@
+package dev.rocco.kig.paper.impl.velocity;
+
+import dev.rocco.kig.paper.api.velocity.KnockbackValues;
+import org.github.paperspigot.PaperSpigotConfig;
+
+public class CraftKnockbackValues implements KnockbackValues {
+    private float horizontal, vertical, friction, sprintingHorizontal, sprintingVertical;
+
+    public CraftKnockbackValues() {
+        resetHorizontalMultiplier();
+        resetVerticalMultiplier();
+        resetSprintingHorizontalMultiplier();
+        resetSprintingVerticalMultiplier();
+        resetFriction();
+    }
+
+    @Override
+    public float getHorizontalMultiplier() {
+        return horizontal;
+    }
+
+    @Override
+    public float getVerticalMultiplier() {
+        return vertical;
+    }
+
+    @Override
+    public float getFriction() {
+        return friction;
+    }
+
+    @Override
+    public float getSprintingHorizontalMultiplier() {
+        return sprintingHorizontal;
+    }
+
+    @Override
+    public float getSprintingVerticalMultiplier() {
+        return sprintingVertical;
+    }
+
+    @Override
+    public void setHorizontalMultiplier(float multiplier) {
+        this.horizontal = multiplier;
+    }
+
+    @Override
+    public void setVerticalMultiplier(float multiplier) {
+        this.vertical = multiplier;
+    }
+
+    @Override
+    public void setSprintingVerticalMultiplier(float multiplier) {
+        this.sprintingVertical = multiplier;
+    }
+
+    @Override
+    public void setSprintingHorizontalMultiplier(float multiplier) {
+        this.sprintingHorizontal = multiplier;
+    }
+
+    @Override
+    public void resetHorizontalMultiplier() {
+        this.horizontal = PaperSpigotConfig.knockbackHorizontalMultiplier;
+    }
+
+    @Override
+    public void resetVerticalMultiplier() {
+        this.vertical = PaperSpigotConfig.knockbackVerticalMultiplier;
+    }
+
+    @Override
+    public void resetFriction() {
+        this.friction = PaperSpigotConfig.knockbackFriction;
+    }
+
+    @Override
+    public void resetSprintingHorizontalMultiplier() {
+        this.sprintingHorizontal = PaperSpigotConfig.knockbackHorizontalSprinting;
+    }
+
+    @Override
+    public void resetSprintingVerticalMultiplier() {
+        this.sprintingVertical = PaperSpigotConfig.knockbackVerticalSprinting;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 088beb22b..415f235e7 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -12,6 +12,8 @@ import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+
+import dev.rocco.kig.paper.impl.velocity.CraftKnockbackValues;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -180,6 +182,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             // PaperSpigot start
             org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
             org.github.paperspigot.PaperSpigotConfig.registerCommands();
+            server.knockbackSettings = new CraftKnockbackValues(); // KigPaper - we need the paper config to be loaded
             // PaperSpigot end
 
             DedicatedServer.LOGGER.info("Generating keypair");
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 0ad4edb83..d352c6d33 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -9,6 +9,8 @@ import java.util.List;
 import java.util.UUID;
 
 // CraftBukkit start
+import dev.rocco.kig.paper.api.velocity.KnockbackValues;
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -1003,7 +1005,12 @@ public abstract class EntityHuman extends EntityLiving {
 
                     if (flag2) {
                         if (i > 0) {
-                            entity.g((double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F));
+                            // KigPaper start - custom knockback
+                            KnockbackValues kbSettings = Bukkit.getKnockbackSettings();
+                            entity.g(-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F * kbSettings.getSprintingHorizontalMultiplier(),
+                                    0.1D * kbSettings.getSprintingVerticalMultiplier(),
+                                    MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F * kbSettings.getSprintingHorizontalMultiplier());
+                            // KigPaper end
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
                             this.setSprinting(false);
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 6096e7df6..dc9d46cee 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -14,6 +14,7 @@ import java.util.UUID;
 import java.util.ArrayList;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
+import dev.rocco.kig.paper.api.velocity.KnockbackValues;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
@@ -901,12 +902,16 @@ public abstract class EntityLiving extends Entity {
             float f1 = MathHelper.sqrt(d0 * d0 + d1 * d1);
             float f2 = 0.4F;
 
-            this.motX /= 2.0D;
-            this.motY /= 2.0D;
-            this.motZ /= 2.0D;
-            this.motX -= d0 / (double) f1 * (double) f2;
-            this.motY += (double) f2;
-            this.motZ -= d1 / (double) f1 * (double) f2;
+            // KigPaper start - custom knockback
+            KnockbackValues kb = Bukkit.getKnockbackSettings();
+            float friction = kb.getFriction();
+            this.motX /= friction;
+            this.motY /= friction;
+            this.motZ /= friction;
+            this.motX -= d0 / f1 * f2 * kb.getHorizontalMultiplier();
+            this.motY += f2 * kb.getVerticalMultiplier();
+            this.motZ -= d1 / f1 * f2 * kb.getHorizontalMultiplier();
+            // KigPaper end
             if (this.motY > 0.4000000059604645D) {
                 this.motY = 0.4000000059604645D;
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 21fb4cd0a..2cd4e2bdc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -11,7 +11,9 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
 import com.mojang.authlib.GameProfile;
 import dev.rocco.kig.paper.api.skin.SkinCache;
+import dev.rocco.kig.paper.api.velocity.KnockbackValues;
 import dev.rocco.kig.paper.impl.skin.CraftSkinCache;
+import dev.rocco.kig.paper.impl.velocity.CraftKnockbackValues;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -121,7 +123,10 @@ public final class CraftServer implements Server {
     private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
     private final List<CraftPlayer> playerView;
     public int reloadCount;
-    private SkinCache skinCache = new CraftSkinCache(); // KigPaper
+    // KigPaper start
+    private SkinCache skinCache = new CraftSkinCache();
+    public KnockbackValues knockbackSettings;
+    // KigPaper end
 
     private final class BooleanWrapper {
         private boolean value = true;
@@ -671,6 +676,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
+        knockbackSettings = new CraftKnockbackValues(); // KigPaper - we need the paper config to be loaded
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -1801,5 +1807,10 @@ public final class CraftServer implements Server {
     public SkinCache getSkinCache() {
         return skinCache;
     }
+
+    @Override
+    public KnockbackValues getKnockbackSettings() {
+        return knockbackSettings;
+    }
     // KigPaper end
 }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index d6d9899e2..d1774c21b 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -222,4 +222,22 @@ public class PaperSpigotConfig
     {
         warnForExcessiveVelocity = getBoolean("warnWhenSettingExcessiveVelocity", true);
     }
+    // KigPaper start
+    public static float knockbackHorizontalMultiplier, knockbackVerticalMultiplier, knockbackHorizontalSprinting, knockbackVerticalSprinting, knockbackFriction;
+    private static void knockbackHorizontalMultiplier() {
+        knockbackHorizontalMultiplier = (float) getDouble("knockback.horizontal.normal", 1f);
+    }
+    private static void knockbackVerticalMultiplier() {
+        knockbackVerticalMultiplier = (float) getDouble("knockback.vertical.normal", 1f);
+    }
+    private static void knockbackHorizontalSprinting() {
+        knockbackHorizontalSprinting = (float) getDouble("knockback.horizontal.sprinting", 1f);
+    }
+    private static void knockbackVerticalSprinting() {
+        knockbackVerticalSprinting = (float) getDouble("knockback.vertical.sprinting", 1f);
+    }
+    private static void knockbackFriction() {
+        knockbackFriction = (float) getDouble("knockback.friction", 2f);
+    }
+    // KigPaper end
 }
-- 
2.26.2

