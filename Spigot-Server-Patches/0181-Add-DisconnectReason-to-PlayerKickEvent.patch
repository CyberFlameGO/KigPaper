From 6867493396173db0c8747f547f2db9257e946846 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Wed, 26 May 2021 23:59:20 +0200
Subject: [PATCH] Add DisconnectReason to PlayerKickEvent


diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index a7b9e4e71..0d8a003a0 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
 import com.google.common.util.concurrent.Futures;
+import dev.rocco.kig.paper.api.event.DisconnectReason;
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
@@ -152,7 +153,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
         if (this.player.D() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.az() - this.player.D() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
             this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
-            this.disconnect("You have been idle for too long!");
+            this.disconnect("You have been idle for too long!", DisconnectReason.KICK_IDLE);
         }
 
     }
@@ -161,14 +162,14 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         return this.networkManager;
     }
 
-    public void disconnect(String s) {
+    public void disconnect(String s, DisconnectReason reason) { // KigPaper - add DisconnectReason
         // KigPaper - if already disconnecting, do nothing
         if(disconnecting) return;
 
         // CraftBukkit start - fire PlayerKickEvent
         String leaveMessage = EnumChatFormat.YELLOW + this.player.getName() + " left the game.";
 
-        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.player), s, leaveMessage);
+        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.player), s, leaveMessage, reason); // KigPaper - add DisconnectReason
 
         if (this.server.getServer().isRunning()) {
             this.server.getPluginManager().callEvent(event);
@@ -213,7 +214,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public void a(PacketPlayInFlying packetplayinflying) {
         PlayerConnectionUtils.ensureMainThread(packetplayinflying, this, this.player.u());
         if (this.b(packetplayinflying)) {
-            this.disconnect("Invalid move packet received");
+            this.disconnect("Invalid move packet received", DisconnectReason.KICK_BAD_PACKET);
         } else {
             WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
@@ -380,7 +381,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         d8 = packetplayinflying.b();
                         d9 = packetplayinflying.c();
                         if (Math.abs(packetplayinflying.a()) > 3.0E7D || Math.abs(packetplayinflying.c()) > 3.0E7D) {
-                            this.disconnect("Illegal position");
+                            this.disconnect("Illegal position", DisconnectReason.KICK_BAD_PACKET);
                             return;
                         }
                     }
@@ -454,7 +455,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             ++this.g;
                             if (this.g > 80) {
                                 PlayerConnection.c.warn(this.player.getName() + " was kicked for floating too long!");
-                                this.disconnect("Flying is not enabled on this server");
+                                this.disconnect("Flying is not enabled on this server", DisconnectReason.KICK_FLYING);
                                 return;
                             }
                         }
@@ -595,7 +596,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     this.dropCount++;
                     if (this.dropCount >= 20) {
                         this.c.warn(this.player.getName() + " dropped their items too quickly!");
-                        this.disconnect("You dropped your items too quickly (Hacking?)");
+                        this.disconnect("You dropped your items too quickly (Hacking?)", DisconnectReason.KICK_RATE_LIMIT);
                         return;
                     }
                 }
@@ -953,7 +954,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             this.player.resetIdleTimer();
         } else {
             PlayerConnection.c.warn(this.player.getName() + " tried to set an invalid carried item");
-            this.disconnect("Invalid hotbar selection (Hacking?)"); // CraftBukkit //Spigot "Nope" -> Descriptive reason
+            this.disconnect("Invalid hotbar selection (Hacking?)", DisconnectReason.KICK_BAD_PACKET); // CraftBukkit //Spigot "Nope" -> Descriptive reason
         }
     }
 
@@ -982,7 +983,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         Waitable waitable = new Waitable() {
                             @Override
                             protected Object evaluate() {
-                                PlayerConnection.this.disconnect("Illegal characters in chat");
+                                PlayerConnection.this.disconnect("Illegal characters in chat", DisconnectReason.KICK_BAD_PACKET);
                                 return null;
                             }
                         };
@@ -997,7 +998,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             throw new RuntimeException(e);
                         }
                     } else {
-                        this.disconnect("Illegal characters in chat");
+                        this.disconnect("Illegal characters in chat", DisconnectReason.KICK_BAD_PACKET);
                     }
                     // CraftBukkit end
                     return;
@@ -1059,7 +1060,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     Waitable waitable = new Waitable() {
                         @Override
                         protected Object evaluate() {
-                            PlayerConnection.this.disconnect("disconnect.spam");
+                            PlayerConnection.this.disconnect("disconnect.spam", DisconnectReason.KICK_SPAM);
                             return null;
                         }
                     };
@@ -1074,7 +1075,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         throw new RuntimeException(e);
                     }
                 } else {
-                    this.disconnect("disconnect.spam");
+                    this.disconnect("disconnect.spam", DisconnectReason.KICK_SPAM);
                 }
                 // CraftBukkit end
             }
@@ -1322,7 +1323,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         // Spigot Start
         if ( entity == player && !player.isSpectator() )
         {
-            disconnect( "Cannot interact with self!" );
+            disconnect( "Cannot interact with self!", DisconnectReason.KICK_BAD_PACKET );
             return;
         }
         // Spigot End
@@ -1406,7 +1407,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     // CraftBukkit end
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
                     if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
-                        this.disconnect("Attempting to attack an invalid entity");
+                        this.disconnect("Attempting to attack an invalid entity", DisconnectReason.KICK_BAD_PACKET);
                         this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
                         return;
                     }
@@ -1436,13 +1437,13 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
             } else if (this.player.u().getWorldData().isHardcore()) {
                 if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!", DisconnectReason.HARDCORE_DEATH);
                     this.minecraftServer.aa();
                 } else {
                     GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), (Date) null, "(You just lost the game)", (Date) null, "Death in Hardcore");
 
                     this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!", DisconnectReason.HARDCORE_DEATH);
                 }
             } else {
                 if (this.player.getHealth() > 0.0F) {
@@ -1884,7 +1885,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 }
             }
         } else {
-            disconnect("Not in creative mode"); // KigPaper
+            disconnect("Not in creative mode", DisconnectReason.KICK_BAD_PACKET); // KigPaper
         }
 
     }
@@ -1981,7 +1982,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.u());
         // CraftBukkit start
         if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
-            this.disconnect("disconnect.spam");
+            this.disconnect("disconnect.spam", DisconnectReason.KICK_SPAM);
             return;
         }
         // CraftBukkit end
@@ -2012,7 +2013,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         if ("MC|BEdit".equals(packetplayincustompayload.a())) {
             if (!PaperSpigotConfig.enableBookDeserialization) return; // KigPaper
             if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
-                this.disconnect("Book edited too quickly! (Attempted server crash?)");
+                this.disconnect("Book edited too quickly! (Attempted server crash?)", DisconnectReason.KICK_BAD_PACKET_SEVERE);
                 return;
             }
             this.lastBookTick = MinecraftServer.currentTick;
@@ -2040,7 +2041,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 }
             } catch (Exception exception) {
                 PlayerConnection.c.error("Couldn\'t handle book info", exception);
-                this.disconnect("Invalid book data!"); // CraftBukkit
+                this.disconnect("Invalid book data!", DisconnectReason.KICK_BAD_PACKET_SEVERE); // CraftBukkit
                 return;
             } finally {
                 packetdataserializer.release();
@@ -2050,7 +2051,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
             if (!PaperSpigotConfig.enableBookDeserialization) return; // KigPaper
             if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
-                this.disconnect("Book edited too quickly! (Attempted server crash?)");
+                this.disconnect("Book edited too quickly! (Attempted server crash?)", DisconnectReason.KICK_BAD_PACKET_SEVERE);
                 return;
             }
             packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
@@ -2082,7 +2083,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 }
             } catch (Exception exception1) {
                 PlayerConnection.c.error("Couldn\'t sign book", exception1);
-                this.disconnect("Invalid book data!"); // CraftBukkit
+                this.disconnect("Invalid book data!", DisconnectReason.KICK_BAD_PACKET); // CraftBukkit
                 return;
             } finally {
                 packetdataserializer.release();
@@ -2099,7 +2100,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 }
             } catch (Exception exception2) {
                 PlayerConnection.c.error("Couldn\'t select trade", exception2);
-                this.disconnect("Invalid trade data!"); // CraftBukkit
+                this.disconnect("Invalid trade data!", DisconnectReason.KICK_BAD_PACKET); // CraftBukkit
             }
         } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
             if (!this.minecraftServer.getEnableCommandBlock()) {
@@ -2140,7 +2141,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     }
                 } catch (Exception exception3) {
                     PlayerConnection.c.error("Couldn\'t set command block", exception3);
-                    this.disconnect("Invalid CommandBlock data!"); // CraftBukkit
+                    this.disconnect("Invalid CommandBlock data!", DisconnectReason.KICK_BAD_PACKET); // CraftBukkit
                 } finally {
                     packetdataserializer.release();
                 }
@@ -2166,7 +2167,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     }
                 } catch (Exception exception4) {
                     PlayerConnection.c.error("Couldn\'t set beacon", exception4);
-                    this.disconnect("Invalid beacon data!"); // CraftBukkit
+                    this.disconnect("Invalid beacon data!", DisconnectReason.KICK_BAD_PACKET); // CraftBukkit
                 }
             }
         } else if ("MC|ItemName".equals(packetplayincustompayload.a()) && this.player.activeContainer instanceof ContainerAnvil) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 8c104c8bb..4b8b81352 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import dev.rocco.kig.paper.api.event.DisconnectReason;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.net.SocketAddress;
@@ -438,7 +439,7 @@ public abstract class PlayerList {
         while (iterator.hasNext()) {
             entityplayer = (EntityPlayer) iterator.next();
             savePlayerFile(entityplayer); // CraftBukkit - Force the player's inventory to be saved
-            entityplayer.playerConnection.disconnect("You logged in from another location");
+            entityplayer.playerConnection.disconnect("You logged in from another location", DisconnectReason.KICK_ALREADY_LOGGED_IN);
         }
 
         // Instead of kicking then returning, we need to store the kick reason
@@ -1214,7 +1215,7 @@ public abstract class PlayerList {
 
     public void u() {
         for (int i = 0; i < this.players.size(); ++i) {
-            ((EntityPlayer) this.players.get(i)).playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+            ((EntityPlayer) this.players.get(i)).playerConnection.disconnect(this.server.server.getShutdownMessage(), DisconnectReason.SERVER_SHUTTING_DOWN); // CraftBukkit - add custom shutdown message
         }
 
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 0f3aa24aa..0f44b3712 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.authlib.GameProfile;
+import dev.rocco.kig.paper.api.event.DisconnectReason;
 import io.netty.buffer.Unpooled;
 
 import java.io.ByteArrayOutputStream;
@@ -357,7 +358,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         org.spigotmc.AsyncCatcher.catchOp( "player kick"); // Spigot
         if (getHandle().playerConnection == null) return;
 
-        getHandle().playerConnection.disconnect(message == null ? "" : message);
+        getHandle().playerConnection.disconnect(message == null ? "" : message, DisconnectReason.KICK_PLUGIN);
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 429c25804..ea3b4de64 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -2,6 +2,8 @@ package org.spigotmc;
 
 import java.io.File;
 import java.util.List;
+
+import dev.rocco.kig.paper.api.event.DisconnectReason;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.command.Command;
@@ -55,7 +57,7 @@ public class RestartCommand extends Command
                 // Kick all players
                 for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
                 {
-                    p.playerConnection.disconnect(SpigotConfig.restartMessage);
+                    p.playerConnection.disconnect(SpigotConfig.restartMessage, DisconnectReason.SERVER_SHUTTING_DOWN);
                 }
                 // Give the socket a chance to send the packets
                 try
-- 
2.31.1

