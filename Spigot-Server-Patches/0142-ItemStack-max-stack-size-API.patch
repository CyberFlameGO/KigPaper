From a95dfb7df411683c22daaca2cd68ab1e33361e4e Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Thu, 18 Feb 2021 21:00:56 +0100
Subject: [PATCH] ItemStack max stack size API


diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 015ce2834..76d00efc6 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -33,6 +33,7 @@ public final class ItemStack {
     private boolean i;
     private Block j;
     private boolean k;
+    private int customMaxStackSize = -1; // KigPaper
 
     public ItemStack(Block block) {
         this(block, 1);
@@ -93,6 +94,10 @@ public final class ItemStack {
             itemstack.tag = (NBTTagCompound) this.tag.clone();
         }
 
+        // KigPaper start
+        itemstack.customMaxStackSize = this.customMaxStackSize;
+        // KigPaper end
+
         this.count -= i;
         return itemstack;
     }
@@ -281,8 +286,19 @@ public final class ItemStack {
     }
 
     public int getMaxStackSize() {
-        return this.getItem().getMaxStackSize();
+        // return this.getItem().getMaxStackSize(); // KigPaper
+        return customMaxStackSize == -1 ? this.getItem().getMaxStackSize() : customMaxStackSize;
+    }
+
+    // KigPaper start
+    public void setCustomMaxStackSize(int stackSize) {
+        this.customMaxStackSize = stackSize;
+    }
+
+    public boolean hasCustomMaxStackSize() {
+        return this.customMaxStackSize != -1;
     }
+    // KigPaper end
 
     public boolean isStackable() {
         return this.getMaxStackSize() > 1 && (!this.e() || !this.g());
@@ -303,6 +319,7 @@ public final class ItemStack {
     }
 
     public boolean g() {
+        if(customMaxStackSize != -1 && this.count <= customMaxStackSize) return false; // KigPaper
         return this.e() && this.damage > 0;
     }
 
@@ -453,6 +470,9 @@ public final class ItemStack {
         if (this.tag != null) {
             itemstack.tag = (NBTTagCompound) this.tag.clone();
         }
+        // KigPaper start
+        itemstack.customMaxStackSize = this.customMaxStackSize;
+        // KigPaper end
 
         return itemstack;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 23f05f4db..bed42ed5b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -47,6 +47,9 @@ public final class CraftItemStack extends ItemStack {
         if (original.hasItemMeta()) {
             setItemMeta(stack, original.getItemMeta());
         }
+        if(original.hasCustomMaxStackSize()) {
+            stack.setCustomMaxStackSize(original.getMaxStackSize());
+        }
         return stack;
     }
 
@@ -67,6 +70,11 @@ public final class CraftItemStack extends ItemStack {
         if (hasItemMeta(original)) {
             stack.setItemMeta(getItemMeta(original));
         }
+        // KigPaper start
+        if(original.hasCustomMaxStackSize()) {
+            stack.setMaxStackSize(original.getMaxStackSize());
+        }
+        // KigPaper end
         return stack;
     }
 
@@ -96,11 +104,17 @@ public final class CraftItemStack extends ItemStack {
      * Mirror
      */
     private CraftItemStack(net.minecraft.server.ItemStack item) {
+        // KigPaper start
+        if(item != null && item.hasCustomMaxStackSize()) setMaxStackSize(item.getMaxStackSize());
+        // KigPaper end
         this.handle = item;
     }
 
     private CraftItemStack(ItemStack item) {
         this(item.getTypeId(), item.getAmount(), item.getDurability(), item.hasItemMeta() ? item.getItemMeta() : null);
+        // KigPaper start
+        if(item.hasCustomMaxStackSize()) setMaxStackSize(item.getMaxStackSize());
+        // KigPaper end
     }
 
     private CraftItemStack(Material type, int amount, short durability, ItemMeta itemMeta) {
@@ -112,7 +126,6 @@ public final class CraftItemStack extends ItemStack {
 
     private CraftItemStack(int typeId, int amount, short durability, ItemMeta itemMeta) {
         this(Material.getMaterial(typeId), amount, durability, itemMeta);
-
     }
 
     @Override
@@ -176,9 +189,18 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public int getMaxStackSize() {
+        if(hasCustomMaxStackSize()) return super.getMaxStackSize();
         return (handle == null) ? Material.AIR.getMaxStackSize() : handle.getItem().getMaxStackSize();
     }
 
+    // KigPaper start
+    @Override
+    public void setMaxStackSize(int maxSize) {
+        super.setMaxStackSize(maxSize);
+        if(handle != null) handle.setCustomMaxStackSize(maxSize);
+    }
+    // KigPaper end
+
     @Override
     public void addUnsafeEnchantment(Enchantment ench, int level) {
         Validate.notNull(ench, "Cannot add null enchantment");
-- 
2.28.0

