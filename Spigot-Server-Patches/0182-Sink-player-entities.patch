From 16324cbb44c104fd3b19ecb5de3ed679ca8847d4 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Sun, 30 May 2021 20:27:36 +0200
Subject: [PATCH] Sink player entities


diff --git a/src/main/java/dev/rocco/kig/paper/impl/cheetah/SinkEntityPlayer.java b/src/main/java/dev/rocco/kig/paper/impl/cheetah/SinkEntityPlayer.java
new file mode 100644
index 000000000..2570ac669
--- /dev/null
+++ b/src/main/java/dev/rocco/kig/paper/impl/cheetah/SinkEntityPlayer.java
@@ -0,0 +1,33 @@
+package dev.rocco.kig.paper.impl.cheetah;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.PacketPlayOutPlayerInfo;
+import net.minecraft.server.PlayerInteractManager;
+import net.minecraft.server.WorldServer;
+import org.bukkit.Location;
+
+import java.nio.ByteBuffer;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.function.Consumer;
+
+public class SinkEntityPlayer extends EntityPlayer {
+    private static final AtomicLong UUID_REGISTRY = new AtomicLong(100);
+    private final Consumer<ByteBuffer> packetConsumer;
+
+    public SinkEntityPlayer(WorldServer worldserver, Consumer<ByteBuffer> packetConsumer, Location spawnLoc) {
+        super(worldserver.getMinecraftServer(), worldserver, new GameProfile(new UUID(0, UUID_REGISTRY.getAndIncrement()), "CH-" + UUID_REGISTRY.get()), new PlayerInteractManager(worldserver));
+        this.packetConsumer = packetConsumer;
+        this.viewDistance = 200;
+        new SinkPlayerConnection(worldserver.getMinecraftServer(), this);
+        // Add existing players
+        playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, worldserver.players.stream().map(e -> (EntityPlayer) e).toArray(EntityPlayer[]::new)));
+        worldserver.sinkPlayers.put(getUniqueID(), this);
+        setLocation(spawnLoc.getX(), spawnLoc.getY(), spawnLoc.getZ(), 0f, 0f);
+    }
+
+    Consumer<ByteBuffer> getPacketConsumer() {
+        return packetConsumer;
+    }
+}
diff --git a/src/main/java/dev/rocco/kig/paper/impl/cheetah/SinkPlayerConnection.java b/src/main/java/dev/rocco/kig/paper/impl/cheetah/SinkPlayerConnection.java
new file mode 100644
index 000000000..f8992b9c7
--- /dev/null
+++ b/src/main/java/dev/rocco/kig/paper/impl/cheetah/SinkPlayerConnection.java
@@ -0,0 +1,42 @@
+package dev.rocco.kig.paper.impl.cheetah;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.util.ReferenceCountUtil;
+import net.minecraft.server.*;
+
+import java.io.IOException;
+
+public class SinkPlayerConnection extends PlayerConnection {
+    public SinkPlayerConnection(MinecraftServer minecraftserver, SinkEntityPlayer entityplayer) {
+        super(minecraftserver, null, entityplayer);
+    }
+
+    @Override
+    public void sendPacket(Packet packet) {
+        // Don't send packet to non existing connection, instead serialize it in place and invoke the callback.
+        ByteBuf direct = Unpooled.directBuffer(), withLength = null;
+        try {
+            PacketDataSerializer serializer = new PacketDataSerializer(direct);
+            packet.b(serializer);
+            // Prepend packet length
+            withLength = Unpooled.directBuffer();
+            int packetSize = direct.readableBytes();
+            int packetSizeVarInt = PacketDataSerializer.a(packetSize);
+            if (packetSizeVarInt > 3) {
+                throw new IllegalArgumentException("unable to fit " + packetSize + " into " + 3);
+            } else {
+                PacketDataSerializer newSerializer = new PacketDataSerializer(withLength);
+                newSerializer.ensureWritable(packetSizeVarInt + packetSize);
+                newSerializer.b(packetSize);
+                newSerializer.writeBytes(direct, direct.readerIndex(), packetSize);
+            }
+            ((SinkEntityPlayer) player).getPacketConsumer().accept(withLength.nioBuffer());
+        } catch (Exception ex) {
+            MinecraftServer.LOGGER.error("Error sending packet to sink entity", ex);
+        } finally {
+            ReferenceCountUtil.release(direct);
+            if (withLength != null) ReferenceCountUtil.release(withLength);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index cb72b3672..098519ec0 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -2,12 +2,14 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class EntityTracker {
 
@@ -109,7 +111,15 @@ public class EntityTracker {
 
             this.c.add(entitytrackerentry);
             this.trackedEntities.a(entity.getId(), entitytrackerentry);
-            entitytrackerentry.scanPlayers(this.world.players);
+            // KigPaper start
+            List<EntityHuman> entitiesToScan;
+            if (this.world.sinkPlayers.isEmpty()) entitiesToScan = this.world.players;
+            else {
+                entitiesToScan = new ArrayList<>(this.world.players);
+                entitiesToScan.addAll(this.world.sinkPlayers.values());
+            }
+            // KigPaper end
+            entitytrackerentry.scanPlayers(entitiesToScan);
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Adding entity to track");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity To Track");
@@ -174,7 +184,15 @@ public class EntityTracker {
         while (iterator.hasNext()) {
             EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
-            entitytrackerentry.track(this.world.players);
+            // KigPaper start
+            List<EntityHuman> entitiesToTrack;
+            if (this.world.sinkPlayers.isEmpty()) entitiesToTrack = this.world.players;
+            else {
+                entitiesToTrack = new ArrayList<>(this.world.players);
+                entitiesToTrack.addAll(this.world.sinkPlayers.values());
+            }
+            // KigPaper end
+            entitytrackerentry.track(entitiesToTrack);
             if (entitytrackerentry.n && entitytrackerentry.tracker instanceof EntityPlayer) {
                 arraylist.add((EntityPlayer) entitytrackerentry.tracker);
             }
@@ -202,7 +220,15 @@ public class EntityTracker {
             EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
             if (entitytrackerentry.tracker == entityplayer) {
-                entitytrackerentry.scanPlayers(this.world.players);
+                // KigPaper start
+                List<EntityHuman> entitiesToTrack;
+                if (this.world.sinkPlayers.isEmpty()) entitiesToTrack = this.world.players;
+                else {
+                    entitiesToTrack = new ArrayList<>(this.world.players);
+                    entitiesToTrack.addAll(this.world.sinkPlayers.values());
+                }
+                // KigPaper end
+                entitytrackerentry.scanPlayers(entitiesToTrack);
             } else {
                 entitytrackerentry.updatePlayer(entityplayer);
             }
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index da9de7371..216f03972 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -5,6 +5,8 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+
+import dev.rocco.kig.paper.impl.cheetah.SinkEntityPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -341,7 +343,7 @@ public class EntityTrackerEntry {
                     // CraftBukkit start - respect vanish API
                     if (this.tracker instanceof EntityPlayer) {
                         Player player = ((EntityPlayer) this.tracker).getBukkitEntity();
-                        if (!entityplayer.getBukkitEntity().canSee(player)) {
+                        if (!(entityplayer instanceof SinkEntityPlayer) && !entityplayer.getBukkitEntity().canSee(player)) { // KigPaper - sink check
                             return;
                         }
                     }
@@ -367,7 +369,7 @@ public class EntityTrackerEntry {
                         Collection collection = attributemapserver.c();
 
                         // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
-                        if (this.tracker.getId() == entityplayer.getId()) {
+                        if (this.tracker.getId() == entityplayer.getId() && !(this.tracker instanceof SinkEntityPlayer)) { // KigPaper - sink check
                             ((EntityPlayer) this.tracker).getBukkitEntity().injectScaledMaxHealth(collection, false);
                         }
                         // CraftBukkit end
@@ -439,6 +441,7 @@ public class EntityTrackerEntry {
     }
 
     public boolean c(EntityPlayer entityplayer) {
+        if (this.tracker instanceof SinkEntityPlayer || entityplayer instanceof SinkEntityPlayer) return true; // KigPaper - sink players should track everyone
         // CraftBukkit start - this.*Loc / 30 -> this.tracker.loc*
         double d0 = entityplayer.locX - this.tracker.locX;
         double d1 = entityplayer.locZ - this.tracker.locZ;
@@ -448,6 +451,7 @@ public class EntityTrackerEntry {
     }
 
     private boolean e(EntityPlayer entityplayer) {
+        if (this.tracker instanceof SinkEntityPlayer || entityplayer instanceof SinkEntityPlayer) return true; // KigPaper - sink players should track everyone
         return entityplayer.u().getPlayerChunkMap().a(entityplayer, this.tracker.ae, this.tracker.ag);
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 38586aad7..285de1b14 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -4,6 +4,8 @@ import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
+import dev.rocco.kig.paper.impl.cheetah.SinkEntityPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -481,7 +483,11 @@ public class PlayerChunkMap {
                     entityplayer.playerConnection.sendPacket(packet);
                 }
             }
-
+            // KigPaper start - send updates to sink entities
+            for (SinkEntityPlayer player : world.sinkPlayers.values()) {
+                player.playerConnection.sendPacket(packet);
+            }
+            // KigPaper end
         }
 
         public void b() {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 0d8a003a0..c4fa55a3a 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -95,7 +95,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
-        networkmanager.a((PacketListener) this);
+        if (networkmanager != null) networkmanager.a((PacketListener) this); // KigPaper - sink players have null networkmanager
         this.player = entityplayer;
         entityplayer.playerConnection = this;
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 4b8b81352..cbbd30a45 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -352,6 +352,11 @@ public abstract class PlayerList {
         if (entityplayer.world == worldserver && !worldserver.players.contains(entityplayer)) {
             worldserver.addEntity(entityplayer);
             this.a(entityplayer, (WorldServer) null);
+            // KigPaper start - sinks
+            for (EntityPlayer player : worldserver.sinkPlayers.values()) {
+                player.playerConnection.sendPacket(packet);
+            }
+            // KigPaper end
         }
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 5e71199ff..2f85e585c 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -13,6 +13,8 @@ import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+
+import dev.rocco.kig.paper.impl.cheetah.SinkEntityPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -50,6 +52,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private static final List<StructurePieceTreasure> U = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.STICK, 0, 1, 3, 10), new StructurePieceTreasure(Item.getItemOf(Blocks.PLANKS), 0, 1, 3, 10), new StructurePieceTreasure(Item.getItemOf(Blocks.LOG), 0, 1, 3, 10), new StructurePieceTreasure(Items.STONE_AXE, 0, 1, 1, 3), new StructurePieceTreasure(Items.WOODEN_AXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.STONE_PICKAXE, 0, 1, 1, 3), new StructurePieceTreasure(Items.WOODEN_PICKAXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.APPLE, 0, 2, 3, 5), new StructurePieceTreasure(Items.BREAD, 0, 2, 3, 3), new StructurePieceTreasure(Item.getItemOf(Blocks.LOG2), 0, 1, 3, 10)});
     private List<NextTickListEntry> V = Lists.newArrayList();
 
+    // KigPaper start
+    public final Map<UUID, SinkEntityPlayer> sinkPlayers = Maps.newHashMap();
+    // KigPaper end
+
     // CraftBukkit start
     public final int dimension;
 
@@ -1017,6 +1023,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         super.b(entity);
         this.entitiesById.d(entity.getId());
         this.entitiesByUUID.remove(entity.getUniqueID());
+        this.sinkPlayers.remove(entity.getUniqueID()); // KigPaper - sinks
         Entity[] aentity = entity.aB();
 
         if (aentity != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c9630d7c4..0b44d1f48 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -980,6 +980,10 @@ public final class CraftServer implements Server {
             // KigPaper end
         }
 
+        // KigPaper start - sinks
+        for (EntityPlayer sink : new ArrayList<>(handle.sinkPlayers.values())) handle.removeEntity(sink);
+        // KigPaper end
+
         worlds.remove(world.getName().toLowerCase());
         console.worlds.remove(console.worlds.indexOf(handle));
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 555481816..557fff824 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit;
 
 import com.google.common.base.Preconditions;
 import java.io.File;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -12,7 +13,10 @@ import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
 
+import dev.rocco.kig.paper.impl.cheetah.SinkEntityPlayer;
 import net.minecraft.server.*;
 
 import org.apache.commons.lang.Validate;
@@ -46,8 +50,6 @@ import org.bukkit.entity.minecart.PoweredMinecart;
 import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.bukkit.entity.minecart.StorageMinecart;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-import org.bukkit.event.weather.ThunderChangeEvent;
-import org.bukkit.event.weather.WeatherChangeEvent;
 import org.bukkit.event.world.SpawnChangeEvent;
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.generator.ChunkGenerator;
@@ -386,6 +388,16 @@ public class CraftWorld implements World {
         net.minecraft.server.Entity entity = getHandle().a(id);
         return entity == null ? null : entity.getBukkitEntity();
     }
+
+    @Override
+    public Player spawnSinkPlayer(Location location, Consumer<ByteBuffer> packetConsumer) {
+        return new SinkEntityPlayer(getHandle(), packetConsumer, location).getBukkitEntity();
+    }
+
+    @Override
+    public Collection<Player> getSinkPlayers() {
+        return getHandle().sinkPlayers.values().stream().map(EntityPlayer::getBukkitEntity).collect(Collectors.toList());
+    }
     // KigPaper end
 
     private static void randomLocationWithinBlock(Location loc, double xs, double ys, double zs) {
-- 
2.31.1

