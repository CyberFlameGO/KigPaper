From 93d66bdf114c01a27ed662657a94862522e7ea9c Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Sun, 3 Jan 2021 14:06:43 +0100
Subject: [PATCH] Allow entities to be immune to stuck arrows


diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index f14ece2de..1f039c57f 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -292,7 +292,10 @@ public class EntityArrow extends Entity implements IProjectile {
                             EntityLiving entityliving = (EntityLiving) movingobjectposition.entity;
 
                             if (!this.world.isClientSide) {
-                                entityliving.o(entityliving.bv() + 1);
+                                // KigPaper - allow entities to be "immune" to stuck arrows
+                                if(entityliving.getStickArrows()) {
+                                    entityliving.o(entityliving.bv() + 1);
+                                }
                             }
 
                             if (this.knockbackStrength > 0) {
@@ -355,12 +358,14 @@ public class EntityArrow extends Entity implements IProjectile {
                     this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ);
                 }
             }
+            // KigPaper start - projectile trails
             if(!this.dead && trailEffect != null && ticksLived > 1) {
                 for (j = 0; j < trailEffect.getLoopTimes(); ++j) {
                     Location loc = new Location(bukkitEntity.getWorld(), this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D);
                     trailEffect.spawn(loc);
                 }
             }
+            // KigPaper end
 
             this.locX += this.motX;
             this.locY += this.motY;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index dc9d46cee..af1a70538 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -103,6 +103,9 @@ public abstract class EntityLiving extends Entity {
         ++this.ticksFarFromPlayer; // Above all the floats
     }
     // Spigot end
+    // KigPaper start
+    private boolean stickArrows = true;
+    // KigPaper end
 
     public void G() {
         this.damageEntity(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
@@ -1851,4 +1854,14 @@ public abstract class EntityLiving extends Entity {
     protected void bP() {
         this.updateEffects = true;
     }
+
+    // KigPaper start
+    public boolean getStickArrows() {
+        return stickArrows;
+    }
+
+    public void setStickArrows(boolean capability) {
+        this.stickArrows = capability;
+    }
+    // KigPaper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 3e3a04808..164f19edc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -463,6 +463,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         return true;
     }
 
+    @Override
+    public void setCanArrowsBeStuck(boolean capability) {
+        getHandle().setStickArrows(capability);
+        if(!capability) getHandle().o(0);
+    }
+
+    @Override
+    public boolean getCanArrowsBeStuck() {
+        return getHandle().getStickArrows();
+    }
+
     @Deprecated
     public int _INVALID_getLastDamage() {
         return NumberConversions.ceil(getLastDamage());
-- 
2.28.0

