From d8b8621b0d805726bade5bb91e41a52813a64768 Mon Sep 17 00:00:00 2001
From: RoccoDev <roccodev.business@gmail.com>
Date: Mon, 21 Sep 2020 11:54:43 +0200
Subject: [PATCH] Projectile Effects API


diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 61526c509..f14ece2de 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -1,12 +1,15 @@
 package net.minecraft.server;
 
-import java.util.List;
-
-// CraftBukkit start
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
+import org.bukkit.Location;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerPickupItemEvent;
+
+import java.util.List;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class EntityArrow extends Entity implements IProjectile {
@@ -24,6 +27,27 @@ public class EntityArrow extends Entity implements IProjectile {
     private int as;
     private double damage = 2.0D;
     public int knockbackStrength;
+    // KigPaper start
+    private boolean critDamage, shouldDisplayCrit = true;
+    private ProjectileEffect trailEffect;
+
+    public ProjectileEffect getTrailEffect() {
+        return trailEffect;
+    }
+
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        this.trailEffect = trailEffect;
+    }
+
+    public void setShouldDisplayCrit(boolean shouldDisplayCrit) {
+        this.shouldDisplayCrit = shouldDisplayCrit;
+        setCriticalData(shouldDisplayCrit);
+    }
+
+    public boolean shouldDisplayCrit() {
+        return shouldDisplayCrit;
+    }
+    // KigPaper end
 
     // Spigot Start
     @Override
@@ -240,7 +264,7 @@ public class EntityArrow extends Entity implements IProjectile {
                     f2 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
                     int k = MathHelper.f((double) f2 * this.damage);
 
-                    if (this.isCritical()) {
+                    if (this.isCriticalDamage()) {
                         k += this.random.nextInt(k / 2 + 2);
                     }
 
@@ -326,10 +350,15 @@ public class EntityArrow extends Entity implements IProjectile {
                     }
                 }
             }
-
             if (this.isCritical()) {
                 for (j = 0; j < 4; ++j) {
-                    this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ);
+                }
+            }
+            if(!this.dead && trailEffect != null && ticksLived > 1) {
+                for (j = 0; j < trailEffect.getLoopTimes(); ++j) {
+                    Location loc = new Location(bukkitEntity.getWorld(), this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D);
+                    trailEffect.spawn(loc);
                 }
             }
 
@@ -479,6 +508,19 @@ public class EntityArrow extends Entity implements IProjectile {
     }
 
     public void setCritical(boolean flag) {
+        this.critDamage = flag;
+        if(!flag) setCriticalData(false);
+        else if(shouldDisplayCrit) setCriticalData(true);
+    }
+
+    public boolean isCritical() {
+        byte b0 = this.datawatcher.getByte(16);
+
+        return (b0 & 1) != 0;
+    }
+
+    // KigPaper
+    private void setCriticalData(boolean flag) {
         byte b0 = this.datawatcher.getByte(16);
 
         if (flag) {
@@ -486,14 +528,12 @@ public class EntityArrow extends Entity implements IProjectile {
         } else {
             this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & -2)));
         }
-
     }
 
-    public boolean isCritical() {
-        byte b0 = this.datawatcher.getByte(16);
-
-        return (b0 & 1) != 0;
+    public boolean isCriticalDamage() {
+        return critDamage;
     }
+    // KigPaper end
 
     // CraftBukkit start
     public boolean isInGround() {
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index 0c1c99c8f..c9c899436 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -1,12 +1,15 @@
 package net.minecraft.server;
 
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
+import org.bukkit.Location;
+import org.bukkit.entity.Fish;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerFishEvent;
+
 import java.util.Arrays;
 import java.util.List;
 
 // CraftBukkit start
-import org.bukkit.entity.Player;
-import org.bukkit.entity.Fish;
-import org.bukkit.event.player.PlayerFishEvent;
 // CraftBukkit end
 
 public class EntityFishingHook extends Entity {
@@ -34,6 +37,17 @@ public class EntityFishingHook extends Entity {
     private double aC;
     private double aD;
     private double aE;
+    // KigPaper start
+    private ProjectileEffect trailEffect;
+
+    public ProjectileEffect getTrailEffect() {
+        return trailEffect;
+    }
+
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        this.trailEffect = trailEffect;
+    }
+    // KigPaper end
 
     public static List<PossibleFishingResult> j() {
         return EntityFishingHook.f;
@@ -212,6 +226,12 @@ public class EntityFishingHook extends Entity {
             }
 
             if (!this.as) {
+                if(trailEffect != null && ticksLived > 1) {
+                    for (j = 0; j < trailEffect.getLoopTimes(); ++j) {
+                        Location loc = new Location(bukkitEntity.getWorld(), this.locX + this.motX * j / 4.0D, this.locY + this.motY * j / 4.0D, this.locZ + this.motZ * j / 4.0D);
+                        trailEffect.spawn(loc);
+                    }
+                }
                 this.move(this.motX, this.motY, this.motZ);
                 float f1 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index fa090e9ba..eb8336e76 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -1,8 +1,10 @@
 package net.minecraft.server;
 
 // KigPaper start
+
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
+import org.bukkit.Location;
 import org.bukkit.entity.Player;
-// KigPaper end
 
 import java.util.List;
 import java.util.UUID;
@@ -19,6 +21,17 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
     public String shooterName;
     private int i;
     private int ar;
+    // KigPaper start
+    private ProjectileEffect trailEffect;
+
+    public ProjectileEffect getTrailEffect() {
+        return trailEffect;
+    }
+
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        this.trailEffect = trailEffect;
+    }
+    // KigPaper end
 
     public EntityProjectile(World world) {
         super(world);
@@ -177,6 +190,13 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             }
         }
 
+        if(trailEffect != null && ticksLived > 1) {
+            for (j = 0; j < trailEffect.getLoopTimes(); ++j) {
+                Location loc = new Location(bukkitEntity.getWorld(), this.locX + this.motX * j / 4.0D, this.locY + this.motY * j / 4.0D, this.locZ + this.motZ * j / 4.0D);
+                trailEffect.spawn(loc);
+            }
+        }
+
         this.locX += this.motX;
         this.locY += this.motY;
         this.locZ += this.motZ;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index ad489ccc9..53b036b45 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -1,8 +1,10 @@
 package org.bukkit.craftbukkit.entity;
 
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
 import net.minecraft.server.EntityArrow;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Effect;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Arrow;
 import org.bukkit.entity.EntityType;
@@ -25,13 +27,23 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
     }
 
     public boolean isCritical() {
-        return getHandle().isCritical();
+        return getHandle().isCriticalDamage();
     }
 
     public void setCritical(boolean critical) {
         getHandle().setCritical(critical);
     }
 
+    @Override
+    public void setDisplayCrit(boolean displayCrit) {
+        getHandle().setShouldDisplayCrit(displayCrit);
+    }
+
+    @Override
+    public boolean shouldDisplayCrit() {
+        return getHandle().shouldDisplayCrit();
+    }
+
     public ProjectileSource getShooter() {
         return getHandle().projectileSource;   
     }
@@ -45,6 +57,16 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
         getHandle().projectileSource = shooter;
     }
 
+    @Override
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        getHandle().setTrailEffect(trailEffect);
+    }
+
+    @Override
+    public ProjectileEffect getTrailEffect() {
+        return getHandle().getTrailEffect();
+    }
+
     @Override
     public EntityArrow getHandle() {
         return (EntityArrow) entity;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 6f0b9423f..60f222927 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -1,9 +1,11 @@
 package org.bukkit.craftbukkit.entity;
 
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
 import net.minecraft.server.EntityFireball;
 import net.minecraft.server.MathHelper;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Effect;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Fireball;
@@ -45,6 +47,16 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
         getHandle().projectileSource = shooter;
     }
 
+    @Override
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        throw new UnsupportedOperationException("Trails aren't supported on Fireballs.");
+    }
+
+    @Override
+    public ProjectileEffect getTrailEffect() {
+        throw new UnsupportedOperationException("Trails aren't supported on Fireballs.");
+    }
+
     public Vector getDirection() {
         return new Vector(getHandle().dirX, getHandle().dirY, getHandle().dirZ);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index ecfc316bb..4fc4e7385 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -1,11 +1,13 @@
 package org.bukkit.craftbukkit.entity;
 
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.EntityFishingHook;
 import net.minecraft.server.EntityHuman;
 import net.minecraft.server.MathHelper;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Effect;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Fish;
@@ -33,6 +35,16 @@ public class CraftFish extends AbstractProjectile implements Fish {
         }
     }
 
+    @Override
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        getHandle().setTrailEffect(trailEffect);
+    }
+
+    @Override
+    public ProjectileEffect getTrailEffect() {
+        return getHandle().getTrailEffect();
+    }
+
     @Override
     public EntityFishingHook getHandle() {
         return (EntityFishingHook) entity;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
index 2f29f2fc7..4b9293c99 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
@@ -1,8 +1,10 @@
 package org.bukkit.craftbukkit.entity;
 
+import dev.rocco.kig.paper.api.particle.ProjectileEffect;
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityProjectile;
 
+import org.bukkit.Effect;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Projectile;
@@ -59,4 +61,14 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
             getHandle().shooterName = ((CraftHumanEntity) shooter).getName();
         }
     }
+
+    @Override
+    public ProjectileEffect getTrailEffect() {
+        return getHandle().getTrailEffect();
+    }
+
+    @Override
+    public void setTrailEffect(ProjectileEffect trailEffect) {
+        getHandle().setTrailEffect(trailEffect);
+    }
 }
-- 
2.26.2

