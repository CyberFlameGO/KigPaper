From 838f0c8fefd3b116cd2b82881659cebb33978577 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Wed, 12 May 2021 16:04:01 +0200
Subject: [PATCH] Send player info using real UUID for self


diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
index 9c6583ac4..92219e0b3 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -10,15 +10,22 @@ import java.io.IOException;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.UUID;
 
-public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
+public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut>, Cloneable { // KigPaper - make cloneable
 
     private EnumPlayerInfoAction a;
     private final List<PlayerInfoData> b = Lists.newArrayList();
 
     public PacketPlayOutPlayerInfo() {}
 
-    public PacketPlayOutPlayerInfo(EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
+    // KigPaper start
+    public PacketPlayOutPlayerInfo(EnumPlayerInfoAction action, EntityPlayer... players) {
+        this(null, action, players);
+    }
+
+    // KigPaper - add recipient
+    public PacketPlayOutPlayerInfo(EntityPlayer recipient, EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
         this.a = packetplayoutplayerinfo_enumplayerinfoaction;
         EntityPlayer[] aentityplayer1 = aentityplayer;
         int i = aentityplayer.length;
@@ -27,11 +34,13 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
             // KigPaper - nicknames
             EntityPlayer entityplayer = aentityplayer1[j];
             GameProfile profile = entityplayer.getProfile();
-            if(entityplayer.isNicknamed()) {
+            if (entityplayer.isNicknamed()) {
+                // Only spoof if we're not sending the packet to the same player, see cloneFor
+                boolean spoofUUID = recipient == null || !recipient.getUniqueID().equals(entityplayer.getUniqueID());
                 PropertyMap properties = profile.getProperties();
                 // Custom property is here to use the textures from the proxy if provided
                 Collection<Property> fakeTextures = properties.get("kig-textures");
-                profile = new GameProfile(entityplayer.getNickSpoofedUUID(), entityplayer.getNickname());
+                profile = new GameProfile(spoofUUID ? entityplayer.getNickSpoofedUUID() : entityplayer.getUniqueID(), entityplayer.getNickname());
                 if (fakeTextures == null || fakeTextures.isEmpty()) {
                     GameProfile textures = TileEntitySkull.skinCache.getIfPresent(entityplayer.getNickname().toLowerCase());
                     if (textures != null) profile.getProperties().putAll(textures.getProperties());
@@ -45,6 +54,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
         }
 
     }
+    // KigPaper end
 
     // Only used to update ping
     public PacketPlayOutPlayerInfo(EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, Iterable<EntityPlayer> iterable) {
@@ -61,6 +71,33 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
     }
 
+    // KigPaper start
+    /**
+     * Attempts to clone this packet to create a player-specific version for the given recipient.
+     * This is used to make sure recipients don't get the UUID-spoofed version of the packets sent about themselves.
+     * If the packet isn't modified (i.e. the user wasn't being updated) this method will not clone.
+     * @param recipient the player receiving the packet
+     * @return the packet clone, or this instance if the packet wasn't modified
+     */
+    public PacketPlayOutPlayerInfo cloneFor(EntityPlayer recipient) {
+        PacketPlayOutPlayerInfo clone = null;
+        for (int i = 0; i < b.size(); i++) {
+            PlayerInfoData infoData = b.get(i);
+            // If the UUID has been spoofed and we're sending to the same player, reveal it
+            if (infoData.d.getId().equals(recipient.getNickSpoofedUUID())) {
+                clone = this.clone();
+                infoData = infoData.clone();
+                PropertyMap properties = infoData.d.getProperties();
+                infoData.d = new GameProfile(recipient.getUniqueID(), infoData.d.getName());
+                infoData.d.getProperties().putAll(properties);
+                clone.b.set(i, infoData);
+                break;
+            }
+        }
+        return clone == null ? this : clone;
+    }
+    // KigPaper end
+
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = (EnumPlayerInfoAction) packetdataserializer.a(EnumPlayerInfoAction.class);
         int i = packetdataserializer.e();
@@ -198,6 +235,15 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
     }
      */
 
+    @Override
+    public PacketPlayOutPlayerInfo clone() {
+        try {
+            return (PacketPlayOutPlayerInfo) super.clone();
+        } catch (CloneNotSupportedException e) {
+            return this;
+        }
+    }
+
     static class SyntheticClass_1 {
 
         static final int[] a = new int[EnumPlayerInfoAction.values().length];
@@ -236,11 +282,11 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
         }
     }
 
-    public class PlayerInfoData {
+    public static class PlayerInfoData implements Cloneable { // KigPaper - make static and cloneable
 
         private final int b;
         private final WorldSettings.EnumGamemode c;
-        private final GameProfile d;
+        private GameProfile d; // KigPaper - make not final
         private final IChatBaseComponent e;
 
         public PlayerInfoData(GameProfile gameprofile, int i, WorldSettings.EnumGamemode worldsettings_enumgamemode, IChatBaseComponent ichatbasecomponent) {
@@ -269,6 +315,15 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
         public String toString() {
             return Objects.toStringHelper(this).add("latency", this.b).add("gameMode", this.c).add("profile", this.d).add("displayName", this.e == null ? null : IChatBaseComponent.ChatSerializer.a(this.e)).toString();
         }
+
+        @Override
+        public PlayerInfoData clone() {
+            try {
+                return (PlayerInfoData) super.clone();
+            } catch (CloneNotSupportedException cloneNotSupportedException) {
+                return this;
+            }
+        }
     }
 
     public static enum EnumPlayerInfoAction {
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 33a0a095f..6f6c1a2ef 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -34,7 +34,7 @@ public class PlayerInteractManager {
         this.gamemode = worldsettings_enumgamemode;
         worldsettings_enumgamemode.a(this.player.abilities);
         this.player.updateAbilities();
-        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}), this.player); // CraftBukkit
+        this.player.server.getPlayerList().sendAllPlayerInfo(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}), this.player); // CraftBukkit // KigPaper - custom method
     }
 
     public WorldSettings.EnumGamemode getGameMode() {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 6df308a86..8c104c8bb 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -336,14 +336,14 @@ public abstract class PlayerList {
             EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
 
             if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-                entityplayer1.playerConnection.sendPacket(packet);
+                entityplayer1.playerConnection.sendPacket(packet.cloneFor(entityplayer1)); // KigPaper - add cloneFor
             }
 
             if (!entityplayer.getBukkitEntity().canSee(entityplayer1.getBukkitEntity())) {
                 continue;
             }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1}));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(entityplayer, PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1})); // KigPaper - add recipient
         }
         // CraftBukkit end
 
@@ -398,7 +398,7 @@ public abstract class PlayerList {
             EntityPlayer entityplayer2 = (EntityPlayer) this.players.get(i);
 
             if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-                entityplayer2.playerConnection.sendPacket(packet);
+                entityplayer2.playerConnection.sendPacket(packet.cloneFor(entityplayer2)); // KigPaper - add cloneFor
             } else {
                 entityplayer2.getBukkitEntity().removeDisconnectingPlayer(entityplayer.getBukkitEntity());
             }
@@ -900,7 +900,8 @@ public abstract class PlayerList {
 
     public void tick() {
         if (++this.u > 600) {
-            this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, this.players));
+            //this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, this.players)); // KigPaper
+            this.sendAllPlayerInfo(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, this.players), null);
             this.u = 0;
         }
 
@@ -913,6 +914,17 @@ public abstract class PlayerList {
 
     }
 
+    // KigPaper start
+    public void sendAllPlayerInfo(PacketPlayOutPlayerInfo packet, EntityHuman sender) {
+        for (EntityPlayer recipient : this.players) {
+            if (sender instanceof EntityPlayer && !recipient.getBukkitEntity().canSee(((EntityPlayer) sender).getBukkitEntity())) {
+                continue;
+            }
+            recipient.playerConnection.sendPacket(packet.cloneFor(recipient));
+        }
+    }
+    // KigPaper end
+
     // CraftBukkit start - add a world/entity limited version
     public void sendAll(Packet packet, EntityHuman entityhuman) {
         for (int i = 0; i < this.players.size(); ++i) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 16bdeea84..5f9f92739 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -295,9 +295,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             name = getName();
         }
         getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromString(name)[0];
-        for (EntityPlayer player : (List<EntityPlayer>)server.getHandle().players) {
+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()); // KigPaper
+        for (EntityPlayer player : server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
-                player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()));
+                player.playerConnection.sendPacket(packet.cloneFor(player)); // KigPaper - add cloneFor
             }
         }
     }
@@ -306,8 +307,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void updateSelfPlayerInfo() {
         if(getHandle().playerConnection == null) return;
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, getHandle()));
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, getHandle()));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(getHandle(), PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, getHandle()));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(getHandle(), PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, getHandle()));
     }
 
     @Override
@@ -1025,7 +1026,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         //remove the hidden player from this player user list
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, other));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(getHandle(), PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, other));
     }
 
     @Override
@@ -1039,7 +1040,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         EntityTracker tracker = ((WorldServer) entity.world).tracker;
         EntityPlayer other = ((CraftPlayer) player).getHandle();
 
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, other));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(getHandle(), PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, other));
 
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
-- 
2.28.0

